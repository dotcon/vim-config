priority -50

snippet start "start your work"
#! /usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $2_SOURCED=1
declare -r $2_ABS_SRC="$(realpath "${BASH_SOURCE[0]}")"
declare -r $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

${3:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    local PRONAME=`!v expand('%:t:r')`
    local VERSION="v0.0.1"
    local HELP=$(cat <<EOF
$PRONAME $VERSION
$PRONAME --opt xxx

This program is released under the terms of $1.
EOF
)
    ${VISUAL}${0:# What to do}
}

[[ ${FUNCNAME[0]} == "main" ]] \
    && $3 "$@"

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet lib "start a library file"
#! /usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# ONLY allow sourced
[[ ${BASH_SOURCE[0]} == "\$0" ]] \
    && { echo "Only allow to be sourced, not for running." >&2; exit 1; }
# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $2_SOURCED=1
declare -r $2_ABS_SRC="$(realpath "${BASH_SOURCE[0]}")"
declare -r $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

${3:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    ${VISUAL}${0:# What to do}
}

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet test "start a test file"
#! /usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $2_SOURCED=1
declare -r $2_ABS_SRC="$(realpath "${BASH_SOURCE[0]}")"
declare -r $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

source "$$2_ABS_DIR/${3:../baux/lib/test.sh}"

${4:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    $4_setup() {
        tmp=$(mktemp)
    }; $4_setup

    $4_teardown() {
        rm -rf "$tmp"
    }; trap '$4_teardown' RETURN EXIT SIGINT

    ${VISUAL}${0:# What to do}
}

if [[ ${FUNCNAME[0]} == "main" ]]; then
    search_test_cases() {
        sed -rn 's/(^test[-_][[:alnum:]_-]+)(\s+)?\((\s+)?\).*/\1/p' "\$1"
    }
    run_tests() { for cs in "$@"; do "$cs"; done; }
    test_cases=($(search_test_cases "$$2_ABS_SRC"))
    run_tests "${test_cases[@]}"
    summary
fi

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet sign "Sign your work"
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${0:MIT License}.
endsnippet

snippet mode "modeline setting"
# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet guard "source guard"
# ONLY allow sourced
[[ ${BASH_SOURCE[0]} == "\$0" ]] \
    && { echo "Only allow to be sourced, not for running." >&2; exit 1; }
# source guard
[[ $${1:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $1_SOURCED=1
declare -r $1_ABS_SRC="$(realpath "${BASH_SOURCE[0]}")"
declare -r $1_ABS_DIR="$(dirname "$$1_ABS_SRC")"
endsnippet
