priority -50

snippet start "start your work"
#!/usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
readonly $2_SOURCED=1
readonly $2_ABS_SRC="$(readlink -f "${BASH_SOURCE[0]}")"
readonly $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

# Utils
$2_EXIT_CODE=0
warn() { echo -e "$@" >&2; ((++$2_EXIT_CODE)); return ${WERROR:-1}; }
die() { echo -e "$@" >&2; exit $((++$2_EXIT_CODE)); }
debug() { [[ $DEBUG == 1 ]] && echo "$@" || true; }
usage() { echo -e "$HELP"; }
version() { echo -e "$PROGNAME $VERSION"; }
defined() { declare -p "\$1" &>/dev/null; }
definedf() { declare -f "\$1" &>/dev/null; }
is_sourced() { [[ -n ${FUNCNAME[1]} && ${FUNCNAME[1]} != "main" ]]; }
is_array() { local -a def=($(declare -p "\$1" 2>/dev/null)); [[ ${def[1]} =~ a ]]; }
is_map() { local -a def=($(declare -p "\$1" 2>/dev/null)); [[ ${def[1]} =~ A ]]; }
has_tool() { hash "\$1" &>/dev/null; }
ensure() {
    local cmd="\$1"; shift
    local -a info=($(caller 0))
    (eval "$cmd" &>/dev/null) || \
       die "${info[2]}:${info[0]}:${info[1]}:${FUNCNAME[0]} '$cmd' failed. " "$@"
}
date_cmp() { echo "$(($(date -d "\$1" +%s) - $(date -d "\$2" +%s)))"; }
tmpfd() { basename <(:); }
pargs() {
    ensure "[[ $# -ge 3 ]]" "Need OPTIONS, ARGUMENTS and OPTSTRING"
    ensure "[[ -n \$1 && -n \$2 && -n \$3 ]]" "Args should not be empty."
    ensure "is_map \$1 && is_map \$2" "OPTIONS and ARGUMENTS should be map."

    local -n __opt="\$1"
    local -n __arg="\$2"
    local optstr="\$3"
    shift 3

    OPTIND=1
    while getopts "$optstr" opt; do
        [[ $opt == ":" || $opt == "?" ]] && die "$HELP"
        __opt[$opt]=1
        __arg[$opt]="$OPTARG"
    done
    shift $((OPTIND - 1))
}
trap_push() {
    ensure "[[ $# -ge 2 ]]" "Usage: trap_push 'cmds' SIGSPEC..."
    local cmds="\$1"; shift
    for sig in "$@"; do
        defined "trap_$sig" || declare -ga "trap_$sig"
        local -n ts="trap_$sig"
        ts+=("$cmds")
        if [[ $sig == RETURN ]]; then
            trap "trap '$cmds; trap_pop RETURN' RETURN" RETURN 
        else
            trap "$cmds" "$sig"
        fi
    done
}
trap_pop() {
    ensure "[[ $# -ge 1 ]]" "Usage: trap_pop SIGSPEC..."
    for sig in "$@"; do
        defined "trap_$sig" || declare -ga "trap_$sig"
        local -n ts="trap_$sig"
        local cmds
        # pop cmds
        ts=("${ts[@]:0:$((${#ts[@]}-1))}")
        [[ ${#ts[@]} -gt 0 ]] && cmds="${ts[-1]}"
        if [[ $sig == RETURN ]]; then
            trap "trap '$cmds' RETURN" RETURN
        else
            trap "$cmds" "$sig"
        fi
    done
}
require() {
    ensure "[[ $# -gt 2 ]]" "Not enough args."
    ensure "definedf \$1" "\$1 should be a defined func."

    local -a miss
    local cmd="\$1"
    local msg="\$2"
    shift 2
    for obj in "$@"; do
        "$cmd" "$obj" || miss+=("$obj")
    done
    [[ ${#miss[@]} -eq 0 ]] || die "$msg: ${miss[*]}."
}
require_var() { require defined "You need to define vars" "$@"; }
require_func() { require definedf "You need to define funcs" "$@"; }
require_tool() { require has_tool "You need to install tools" "$@"; }
inicfg() { require_tool git; git config --file "$@"; }

${3:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    local PROGNAME="$(basename "${BASH_SOURCE[0]}")"
    local VERSION="v0.0.1"
    local HELP=$(cat <<EOF
$PROGNAME $VERSION
$PROGNAME [-hvD] args
    
    -h  print this help message 
    -v  print version number
    -D  turn on debug mode

This program is released under the terms of the MIT License.
EOF
)
    local -A opts=() args=()
    pargs opts args 'hvD' "$@"
    shift $((OPTIND - 1))
    [[ ${opts[D]} ]] && set -x
    [[ ${opts[h]} ]] && usage && return 0
    [[ ${opts[v]} ]] && version && return 0

    ${VISUAL}${0:# What to do}
}

is_sourced || $3 "$@"

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet lib "start a library file"
#!/usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# ONLY allow sourced
[[ ${BASH_SOURCE[0]} == "\$0" ]] \
    && { echo "Only allow to be sourced, not for running." >&2; exit 1; }
# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $2_SOURCED=1
declare -r $2_ABS_SRC="$(readlink -f "${BASH_SOURCE[0]}")"
declare -r $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

${3:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    ${VISUAL}${0:# What to do}
}

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet test "start a test file"
#!/usr/bin/env bash
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${1:MIT License}.

# source guard
[[ $${2:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $2_SOURCED=1
declare -r $2_ABS_SRC="$(readlink -f "${BASH_SOURCE[0]}")"
declare -r $2_ABS_DIR="$(dirname "$$2_ABS_SRC")"

source "$$2_ABS_DIR/${3:../baux/lib/test.sh}"

${4:`!v substitute(expand('%:t:r'), '[^[:alnum:]]', '_', 'g')`}() {
    $4_setup() {
        tmp=$(mktemp)
    }; $4_setup

    $4_teardown() {
        rm -rf "$tmp"
    }; trap '$4_teardown' RETURN EXIT SIGINT

    ${VISUAL}${0:# What to do}
}

if [[ ${FUNCNAME[0]} == "main" || ${FUNCNAME[0]} == "" ]]; then
    search_test_cases() {
        sed -rn 's/(^test[-_][[:alnum:]_-]+)(\s+)?\((\s+)?\).*/\1/p' "\$1"
    }
    run_tests() { for cs in "$@"; do "$cs"; done; }
    test_cases=($(search_test_cases "$$2_ABS_SRC"))
    run_tests "${test_cases[@]}"
    summary
fi

# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet sign "Sign your work"
# Copyright (c) `!v strftime("%Y")` Herbert Shen <ishbguy@hotmail.com> All Rights Reserved.
# Released under the terms of the ${0:MIT License}.
endsnippet

snippet mode "modeline setting"
# vim:set ft=`!v &ft` ts=4 sw=4:
endsnippet

snippet guard "source guard"
# ONLY allow sourced
[[ ${BASH_SOURCE[0]} == "\$0" ]] \
    && { echo "Only allow to be sourced, not for running." >&2; exit 1; }
# source guard
[[ $${1:`!v substitute(toupper(expand('%:t:r')), '[^[:alnum:]]', '_', 'g')`}_SOURCED -eq 1 ]] && return
declare -r $1_SOURCED=1
declare -r $1_ABS_SRC="$(readlink -f "${BASH_SOURCE[0]}")"
declare -r $1_ABS_DIR="$(dirname "$$1_ABS_SRC")"
endsnippet
